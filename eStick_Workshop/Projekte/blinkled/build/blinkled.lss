
blinkled.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000d2  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000829  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000739  00000000  00000000  000009e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000010a  00000000  00000000  0000111a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001224  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008e  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  58:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  5c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  60:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  64:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  68:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  6c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  70:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d2 e0       	ldi	r29, 0x02	; 2
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  84:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <main>:
#include "eStick.h"   // Das brauchen wir, damit der estick funktioniert

int main( void )    // Beginn des Hauptprogramms
{

   INIT_LEDS;       // das brauchen wir, um die Leds verwenden zu können
  8c:	80 e1       	ldi	r24, 0x10	; 16
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	8f ee       	ldi	r24, 0xEF	; 239
  92:	8b b9       	out	0x0b, r24	; 11
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	87 b9       	out	0x07, r24	; 7
  98:	88 b9       	out	0x08, r24	; 8
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	84 b9       	out	0x04, r24	; 4
  9e:	85 b9       	out	0x05, r24	; 5

   while (1)        //  Endlos-Schleife
   {

	 SET_LED(0);      // Led Nr. 0 einschalten
  a0:	28 98       	cbi	0x05, 0	; 5
  a2:	84 ef       	ldi	r24, 0xF4	; 244
  a4:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	ef e9       	ldi	r30, 0x9F	; 159
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x1e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x24>
  b0:	00 00       	nop
  b2:	01 97       	sbiw	r24, 0x01	; 1
 	 WAIT_MS(500);    // halbe Sekunde warten
  b4:	c1 f7       	brne	.-16     	; 0xa6 <main+0x1a>
	 CLEAR_LED(0);    // Led Nr. 0 ausschalten
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	84 ef       	ldi	r24, 0xF4	; 244
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	ef e9       	ldi	r30, 0x9F	; 159
  be:	ff e0       	ldi	r31, 0x0F	; 15
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x34>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x3a>
  c6:	00 00       	nop
  c8:	01 97       	sbiw	r24, 0x01	; 1
	 WAIT_MS(500);    // halbe Sekunde warten
  ca:	c1 f7       	brne	.-16     	; 0xbc <main+0x30>
  cc:	e9 cf       	rjmp	.-46     	; 0xa0 <main+0x14>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
