
knightrider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000071  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000005a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000005c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001aa  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d6  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000133  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000101  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a0  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  68:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  6c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  70:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d2 e0       	ldi	r29, 0x02	; 2
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	ea e6       	ldi	r30, 0x6A	; 106
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <.do_copy_data_start>

0000008c <.do_copy_data_loop>:
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0

00000090 <.do_copy_data_start>:
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <.do_copy_data_loop>

00000096 <__do_clear_bss>:
  96:	11 e0       	ldi	r17, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a0 30       	cpi	r26, 0x00	; 0
  a2:	b1 07       	cpc	r27, r17
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:

#include "eStick.h"   // Das brauchen wir, damit der estick funktioniert

int main( void )    // Beginn des Hauptprogramms
{
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29

   unsigned int i;      //  Variable i   : kann ganzzahlige positive Werte annehmen
   unsigned int dir;    //  Variable dir : kann ganzzahlige positive Werte annehmen

   INIT_LEDS;        // das brauchen wir, um die Leds verwenden zu können
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	8f ee       	ldi	r24, 0xEF	; 239
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	87 b9       	out	0x07, r24	; 7
  c6:	88 b9       	out	0x08, r24	; 8
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	a1 e0       	ldi	r26, 0x01	; 1
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	07 e0       	ldi	r16, 0x07	; 7
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	c1 e0       	ldi	r28, 0x01	; 1
  dc:	d0 e0       	ldi	r29, 0x00	; 0

   i = 0;            // Variable i (für aktuelle Leuchtposition verwendet): null setzen
   dir = 1;          // Variable dir (für Richtung verwendet): eins setzen - "vorwärts"

   while (1)        //  Endlos-Schleife
   {

  	if (dir == 1)	  // wenn Richtung gleich eins (vorwärts)
  de:	a1 30       	cpi	r26, 0x01	; 1
  e0:	b1 05       	cpc	r27, r1
  e2:	c9 f4       	brne	.+50     	; 0x116 <main+0x64>
	{
		SET_LED(i);       // Led Nr. i einschalten
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	9d 01       	movw	r18, r26
  e8:	06 2e       	mov	r0, r22
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x3e>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <main+0x3a>
  f4:	92 2f       	mov	r25, r18
  f6:	90 95       	com	r25
  f8:	89 23       	and	r24, r25
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	ea ef       	ldi	r30, 0xFA	; 250
 102:	f0 e0       	ldi	r31, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 104:	cf 01       	movw	r24, r30
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x54>
 	    WAIT_MS(70);      // kurz warten (70 Millisekunden)
 10a:	4f 5f       	subi	r20, 0xFF	; 255
 10c:	5f 4f       	sbci	r21, 0xFF	; 255
 10e:	46 34       	cpi	r20, 0x46	; 70
 110:	51 05       	cpc	r21, r1
 112:	c1 f7       	brne	.-16     	; 0x104 <main+0x52>
 114:	1b c0       	rjmp	.+54     	; 0x14c <main+0x9a>
		CLEAR_LED(i);     // Led Nr. i ausschalten
	}
	else              // sonst (Richtung ungleich eins: rückwärts) 
	{
		SET_LED(7-i);     // Led Nr. 7-i einschalten
 116:	85 b1       	in	r24, 0x05	; 5
 118:	98 01       	movw	r18, r16
 11a:	26 1b       	sub	r18, r22
 11c:	37 0b       	sbc	r19, r23
 11e:	ae 01       	movw	r20, r28
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0x74>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	2a 95       	dec	r18
 128:	e2 f7       	brpl	.-8      	; 0x122 <main+0x70>
 12a:	9a 01       	movw	r18, r20
 12c:	94 2f       	mov	r25, r20
 12e:	90 95       	com	r25
 130:	89 23       	and	r24, r25
 132:	85 b9       	out	0x05, r24	; 5
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	ea ef       	ldi	r30, 0xFA	; 250
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13c:	cf 01       	movw	r24, r30
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x8c>
 	    WAIT_MS(70);      // kurz warten (70 Millisekunden)
 142:	4f 5f       	subi	r20, 0xFF	; 255
 144:	5f 4f       	sbci	r21, 0xFF	; 255
 146:	46 34       	cpi	r20, 0x46	; 70
 148:	51 05       	cpc	r21, r1
 14a:	c1 f7       	brne	.-16     	; 0x13c <main+0x8a>
		CLEAR_LED(7-i);   // Led Nr. 7-i ausschalten
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	82 2b       	or	r24, r18
 150:	85 b9       	out	0x05, r24	; 5
	}

    i = i + 1;         // i erhöhen
 152:	6f 5f       	subi	r22, 0xFF	; 255
 154:	7f 4f       	sbci	r23, 0xFF	; 255
	if (i == 8)		   // am ende einer richtung angelangt ?
 156:	68 30       	cpi	r22, 0x08	; 8
 158:	71 05       	cpc	r23, r1
 15a:	09 f0       	breq	.+2      	; 0x15e <main+0xac>
 15c:	c0 cf       	rjmp	.-128    	; 0xde <main+0x2c>
	{
		dir = ~dir;	   // Die Richtung ändern
 15e:	a0 95       	com	r26
 160:	b0 95       	com	r27
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	bb cf       	rjmp	.-138    	; 0xde <main+0x2c>

00000168 <_exit>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <_exit>
