
elektronik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001b0  2**0
                  ALLOC
  2 .stab         00000378  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000599  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000047  00000000  00000000  000005b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000160  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000069  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000ed  00000000  00000000  000007c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_20>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_21>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  68:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  6c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  70:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d2 e0       	ldi	r29, 0x02	; 2
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	ec e3       	ldi	r30, 0x3C	; 60
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <.do_copy_data_start>

0000008c <.do_copy_data_loop>:
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0

00000090 <.do_copy_data_start>:
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <.do_copy_data_loop>

00000096 <__do_clear_bss>:
  96:	11 e0       	ldi	r17, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a2 30       	cpi	r26, 0x02	; 2
  a2:	b1 07       	cpc	r27, r17
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  aa:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <__vector_20>:
// why is there no Compare Match A Interrupt?


ISR(TIMER0_COMPB_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	a++;
  c6:	80 91 00 01 	lds	r24, 0x0100
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 00 01 	sts	0x0100, r24
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_21>:
}


ISR(TIMER0_OVF_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	c++;
  f4:	80 91 01 01 	lds	r24, 0x0101
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 01 01 	sts	0x0101, r24
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <main>:
}



int main(void)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
    
	DDRB = 0x7F;    // set all 7 pins on port B to outputs
 116:	e4 e2       	ldi	r30, 0x24	; 36
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	8f e7       	ldi	r24, 0x7F	; 127
 11c:	80 83       	st	Z, r24
	// TCCR0A = 0x02;	// WGM01 = 1 ... Clear Timer on Compare Match Mode
	TCCR0B = 0x02;  // PreScaler ... clk_io/8
 11e:	e5 e4       	ldi	r30, 0x45	; 69
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 83       	st	Z, r24
	OCR0A = 0x6E;	// Compare Value
 126:	e7 e4       	ldi	r30, 0x47	; 71
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8e e6       	ldi	r24, 0x6E	; 110
 12c:	80 83       	st	Z, r24
	//TIMSK0 = 0x02;	// enable Output A Compare match Interrupt
	TIMSK0 = 1 << OCIE0A;
 12e:	ee e6       	ldi	r30, 0x6E	; 110
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 83       	st	Z, r24
	sei();			// Set Enable Interrupts
 136:	78 94       	sei
	
	while(1)		// endless loop
	{
		;
	}
 138:	ff cf       	rjmp	.-2      	; 0x138 <main+0x2a>

0000013a <_exit>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <_exit>
